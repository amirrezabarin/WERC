
@using Model.ToolsModels.DropDownList
@model Model.ViewModels.Person.VmPerson
<script src="~/Resources/Scripts/jquery.maskedinput.min.js"></script>

<div class="col-xs-12">

    @using (Html.BeginForm("up", "person", FormMethod.Post, new { id = "_ProfileEdit_Form" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>Change Profile</h4>

            <hr />

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.RoleId)
            @Html.HiddenFor(model => model.UserId)

            @Html.ValidationSummary(false, "", new { @class = "text-danger" })

            <div class="row">

                <div class="col-xs-12 col-sm-6">
                    <fieldset>
                        <legend>Person Info</legend>
                        <div class="row">

                            <div class="col-xs-3 col-md-4">

                                <div class="row">

                                    <input id="profilePicturFileInput" name="file" type="file" class="form-control hidden" />


                                    <img id="profilePictureUrlImg" class="profile-img" onclick="$('#profilePicturFileInput').click()" title="@Model["Click to upload your picture"]" />
                                    <hr />
                                    @Model["Click to upload your picture"]
                                    <script>
                                        $('#profilePicturFileInput').on('change', function (e) {

                                            uploadProfilePicture();

                                        });
                                    </script>
                                    @Html.HiddenFor(model => model.ProfilePictureUrl, htmlAttributes: new { @id = "ProfilePictureUrlHidden" })
                                    @Html.ValidationMessage(@Model["ProfilePictureUrl"], "", new { @class = "text-danger" })
                                    <hr />

                                </div>
                                @if (Request.IsAuthenticated && Model.CurrentUserRoles != null && Model.CurrentUserRoles.Contains("Advisor") == false)
                                {
                                    <div class="row">

                                        <input id="resumeFileInput" name="file" type="file" class="form-control hidden" />


                                        <img src="~/Resources/Images/Mimetypes128x128/application_pdf.png" class="profile-img" onclick="$('#resumeFileInput').click()" title="@Model["Click to upload your resume"]" />
                                        <hr />
                                        @Model["Click to upload your resume"]
                                        <script>


                                            $('#resumeFileInput').on('change', function (e) {

                                                uploadResume();

                                            });
                                        </script>
                                        @Html.HiddenFor(model => model.ResumeUrl, htmlAttributes: new { @id = "ResumeUrlHidden" })
                                        @Html.ValidationMessage(@Model["ResumeUrl"], "", new { @class = "text-danger" })

                                    </div>
                                }
                                @if (Request.IsAuthenticated && Model.CurrentUserRoles != null && Model.CurrentUserRoles.Contains("Advisor") == true)
                                {
                                    <div class="row">

                                        <input id="universityPicturFileInput" name="file" type="file" class="form-control hidden" />


                                        <img id="universityPictureUrlImg" class="profile-img" onclick="$('#universityPicturFileInput').click()" title="@Model["Click to upload university logo"]" />
                                        <hr />
                                        @Model["Click to upload university logo"]
                                        <script>
                                            $('#universityPicturFileInput').on('change', function (e) {

                                                uploadUniversityPicture();

                                            });
                                        </script>
                                        @Html.HiddenFor(model => model.UniversityPictureUrl, htmlAttributes: new { @id = "UniversityPictureUrlHidden" })
                                        @Html.ValidationMessage(@Model["UniversityPictureUrl"], "", new { @class = "text-danger" })
                                        <hr />

                                    </div>
                                }
                            </div>

                            <div class="col-xs-9 col-md-8">

                                <div class="form-group">
                                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-7">
                                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                    </div>
                                    <span class="text-danger fa-2x">*</span>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-7">
                                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                                    </div>
                                    <span class="text-danger fa-2x">*</span>
                                </div>


                                <div class="form-group">
                                    @Html.Label(@Model["Diet Type"], new { @class = "col-md-4 control-label" })
                                    <div class="col-md-7">

                                        @Html.Partial("_DropDownList",
                                            new VmDropDownList
                                            {
                                                HtmlElementId = "DietTypeDropDownList",
                                                DataController = "DietType",
                                                DataAction = "gdtddl",
                                                OptionLabel = Model["Select DietType..."],
                                                ActiveItemValue = Model.DietTypeId.ToString(),
                                                OnItemSelected = "DietTypeDropDownList_OnClientSelectedItem",

                                            })

                                        <script>
                                            function DietTypeDropDownList_OnClientSelectedItem(id) {

                                                if (id == "5") {
                                                    $("#otherDietDiv").removeClass("hidden");

                                                }
                                                else {
                                                    $("#otherDietDiv").addClass("hidden");
                                                    $("#dietType").val('');
                                                }

                                                if (id == "9") {
                                                    $("#allergiesDiv").removeClass("hidden");

                                                }
                                                else {
                                                    $("#allergiesDiv").addClass("hidden");
                                                }

                                                $("#dietTypeId").val(id);
                                            }
                                        </script>
                                        <div id="otherDietDiv" class="form-group text-left hidden">
                                            @Html.Label(Model["Enter your diet type"], htmlAttributes: new { @class = "col-md-12" })
                                            <div class="col-md-7">
                                                @Html.EditorFor(model => model.DietType, new { @class = "form-control", @id = "dietType" })
                                                @Html.Hidden(@Model["DietTypeId"], Model.DietTypeId, new { @class = "form-control", @id = "dietTypeId" })
                                            </div>
                                        </div>
                                        <div id="allergiesDiv" class="form-group text-left hidden">
                                            @Html.Label(Model["Enter your allergies"], htmlAttributes: new { @class = "col-md-12" })
                                            <div class="col-md-11">
                                                @Html.TextAreaFor(model => model.Allergies, new { @class = "form-control allergies", @id = "allergies" })
                                            </div>
                                        </div>
                                    </div>

                                    <span class="text-danger fa-2x">*</span>

                                </div>

                                <div class="form-group">
                                    @Html.Label(@Model["T-Shirt Size"], new { @class = "col-md-4 control-label" })
                                    <div class="col-md-7">

                                        @Html.Partial("_DropDownList",
                                            new VmDropDownList
                                            {
                                                HtmlElementId = "SizeId",
                                                DataController = "Size",
                                                DataAction = "gsddl",
                                                OptionLabel = Model["Select T-Shirt Size..."],
                                                ActiveItemValue = Model.SizeId.ToString(),
                                                OnItemSelected = "SizeDropDownList_OnClientSelectedItem",

                                            })

                                        @Html.ValidationMessage(@Model["SizeId"], "", new { @class = "text-danger" })

                                        <script>
                                            function SizeDropDownList_OnClientSelectedItem(id) {
                                            }
                                        </script>
                                    </div>
                                    <span class="text-danger fa-2x">*</span>
                                </div>

                                @if (Request.IsAuthenticated && Model.CurrentUserRoles != null && (Model.CurrentUserRoles.Contains("Advisor") || Model.CurrentUserRoles.Contains("Judge") || Model.CurrentUserRoles.Contains("Lab")))
                                {
                                    <div class="form-group">
                                        @Html.Label(@Model["Jacket Size"], new { @class = "col-md-4 control-label" })
                                        <div class="col-md-7">

                                            @Html.Partial("_DropDownList",
                                             new VmDropDownList
                                             {
                                                 HtmlElementId = "JacketSizeId",
                                                 DataController = "Size",
                                                 DataAction = "gjsddl",
                                                 OptionLabel = Model["Select Jacket Size..."],
                                                 ActiveItemValue = Model.JacketSizeId.ToString(),
                                                 OnItemSelected = "JacketSizeDropDownList_OnClientSelectedItem",

                                             })

                                            @Html.ValidationMessage(@Model["JacketSizeId"], "", new { @class = "text-danger" })

                                            <script>
                                                function JacketSizeDropDownList_OnClientSelectedItem(id) {

                                                }
                                            </script>
                                        </div>
                                        <span class="text-danger fa-2x">*</span>
                                    </div>

                                }

                                <div class="form-group">
                                    @Html.Label(@Model["Gender for Style"], new { @class = "col-md-4 control-label" })
                                    <div class="col-md-7">
                                        @Html.DropDownList("Sex", new List<SelectListItem>
                                                                    {
                                                                        new SelectListItem{ Text="Male", Value="false"},
                                                                        new SelectListItem{ Text="Female", Value="true"}
                                                                    },  new { @class = "form-control" })
                                    </div>
                                    <span class="text-danger fa-2x">*</span>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ShortBio, htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-7">
                                        @Html.TextAreaFor(model => model.ShortBio, new { @class = "form-control short-bio" })
                                        @Html.ValidationMessageFor(model => model.ShortBio, "", new { @class = "text-danger" })
                                    </div>
                                    <span class="text-danger fa-2x">*</span>
                                </div>
                            </div>
                        </div>
                    </fieldset>
                </div>
                <div class="col-xs-12 col-sm-6">
                    <fieldset>
                        <legend>Address</legend>
                        <div>
                            @if (Request.IsAuthenticated && Model.CurrentUserRoles != null && Model.CurrentUserRoles.Contains("Advisor"))
                            {
                                <div class="form-group text-left">
                                    @Html.Label(@Model["University"], new { @class = " col-md-3 control-label" })
                                    <div class="col-md-7">

                                        @Html.Partial("_DropDownList",
                                           new VmDropDownList
                                           {
                                               HtmlElementId = "UniversityId",
                                               DataController = "University",
                                               DataAction = "guddl",
                                               OptionLabel = Model["Select University..."],
                                               ActiveItemValue = Model.UniversityId.ToString(),
                                               OnItemSelected = "UniversityDropDownList_OnClientSelectedItem",

                                           })

                                        @Html.ValidationMessage(@Model["UniversityId"], "", new { @class = "text-danger" })

                                        <script>
                                            function UniversityDropDownList_OnClientSelectedItem(id) {
                                                loadUniversityPictureUrl(id);

                                            }
                                        </script>
                                    </div>
                                    <span class="text-danger fa-2x">*</span>
                                </div>
                            }
                            @if (Request.IsAuthenticated && Model.CurrentUserRoles != null && Model.CurrentUserRoles.Contains("Admin"))
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-3" })
                                    <div class="col-md-5">
                                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.SecondaryEmail, htmlAttributes: new { @class = "control-label col-md-3" })
                                    <div class="col-md-5">
                                        @Html.EditorFor(model => model.SecondaryEmail, new { htmlAttributes = new { @class = "form-control" } })
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-3" })
                                    <div class="col-md-5">
                                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                                    </div>
                                </div>
                            }

                            <div class="form-group">
                                @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                                </div>
                                <span class="text-danger fa-2x">*</span>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.StreetLine1, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.StreetLine1, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.StreetLine1, "", new { @class = "text-danger" })
                                </div>
                                <span class="text-danger fa-2x">*</span>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.StreetLine2, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.StreetLine2, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                            </div>

                            <div class="form-group">

                                @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })

                                </div>
                                <div class="col-md-1 text-left">
                                    <span class="text-danger fa-2x remove-margin-left">*</span>
                                </div>
                                @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-1" })
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1 text-left remove-margin-left">
                                    <span class="text-danger fa-2x">*</span>
                                </div>
                            </div>

                            <div class="form-group">

                                @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
                                </div>
                                <span class="text-danger fa-2x">*</span>
                            </div>

                            <div class="form-group">


                                @if (Request.IsAuthenticated && Model.CurrentUserRoles != null
                                    &&
                                    Model.CurrentUserRoles.Contains("Admin") == false
                                    &&
                                    (Model.Agreement.Value == false || Model.Agreement == null))
                                {
                                    <div class="col-xs-12 col-sm-9 col-md-10">


                                    </div>

                                    <div class="col-xs-12">
                                        <div class="" onclick="Preview_Click('agreementsTextDiv')" title="Click here...">

                                            <a href="#"><b> (Photograph & Video Release Consent)</b></a>

                                        </div>

                                        <div class="inline-block">
                                            @*<input type="checkbox" name="Agreement" />*@
                                            @Html.CheckBox("Agreement")
                                            @Html.ValidationMessageFor(model => model.Agreement, "", new { @class = "text-danger" })
                                            <span class="text-danger fa-2x">*</span>
                                            By checking the box in, I acknowledge that I have completely read and fully understand the (Photograph & Video Release Consent) and agree to be bound thereby. I hereby release any and all claims against any person or organization utilizing this material for educational purposes.
                                        </div>

                                        <div id="agreementsTextDiv" style="display:none">

                                            <div class="col-xs-12 agreements">
                                                <b>Photograph &amp; Video Release Consent<br>&nbsp;</b>
                                                <br>I hereby grant permission to the rights of my image, likeness and sound of my voice as recorded on audio or video tape without payment or any other consideration.&nbsp; I understand that my image may be edited, copied, exhibited, published or distributed and waive the right to inspect or approve the finished product wherein my likeness appears. Additionally, I waive any right to royalties or other compensation arising or related to the use of my image or recording.&nbsp; I also understand that this material may be used in diverse educational settings within an unrestricted geographic area.
                                                <br>&nbsp;<br>Photographic, audio or video recordings may be used for the following purposes:
                                                <br>conference presentations
                                                <br>educational presentations or courses
                                                <br>informational presentations
                                                <br>on-line educational courses
                                                <br>educational videos
                                                <br>&nbsp;
                                                <br>By signing this release I understand this permission signifies that photographic or video recordings of me may be electronically displayed via the Internet or in the public educational setting.
                                                <br>&nbsp;
                                                <br>I will be consulted about the use of the photographs or video recording for any purpose other than those listed above.
                                                <br>&nbsp;
                                                <br>There is no time limit on the validity of this release nor is there any geographic limitation on where these materials may be distributed.
                                                <br>&nbsp;
                                                <br>This release applies to photographic, audio or video recordings collected as part of the sessions listed on this document only.


                                            </div>

                                        </div>

                                    </div>
                                }
                                else
                                {
                                    <input id="Agreement" name="Agreement" type="hidden" value="@Model.Agreement.ToString().ToLower()" />
                                }
                            </div>
                        </div>
                    </fieldset>

                </div>

            </div>

            <hr />
            @{
                var EmgrColClass = "col-sm-6";
                var MealsColClass = "col-sm-6";
                var TaskColClass = "";
            }

            @if (Request.IsAuthenticated && Model.CurrentUserRoles != null && Model.CurrentUserRoles.Contains("Judge"))
            {
                EmgrColClass = "col-sm-4";
                MealsColClass = "col-sm-4";
                TaskColClass = "col-sm-4";
            }

            <div class="row">

                <div class="col-xs-12 @EmgrColClass">
                    <fieldset>
                        <legend>Person to contact in case of Emergency</legend>
                        <div class="row">
                            <div class="hidden-xs col-sm-1 col-md-1"></div>

                            <div class="col-xs-12 col-sm-12 col-md-12">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.EmgyPersonFirstName, htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-7">
                                        @Html.EditorFor(model => model.EmgyPersonFirstName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.EmgyPersonFirstName, "", new { @class = "text-danger" })
                                    </div>
                                    <span class="text-danger fa-2x">*</span>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.EmgyPersonLastName, htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-7">
                                        @Html.EditorFor(model => model.EmgyPersonLastName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.EmgyPersonLastName, "", new { @class = "text-danger" })
                                    </div>
                                    <span class="text-danger fa-2x">*</span>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.EmgyPersonPhoneNumber, htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-7">
                                        @Html.EditorFor(model => model.EmgyPersonPhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.EmgyPersonPhoneNumber, "", new { @class = "text-danger" })
                                    </div>
                                    <span class="text-danger fa-2x">*</span>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.EmgyPersonRelationship, htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-7">
                                        @Html.EditorFor(model => model.EmgyPersonRelationship, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.EmgyPersonRelationship, "", new { @class = "text-danger" })
                                    </div>
                                    <span class="text-danger fa-2x">*</span>
                                </div>
                            </div>
                        </div>
                    </fieldset>
                </div>

                <div class="col-xs-12 @MealsColClass">
                    <fieldset>
                        <legend>Select the meals you are planning to attend</legend>
                        <div class="row text-left">
                            <div class="form-group">
                                <div class="col-md-12">
                                    @Html.CheckBoxFor(model => model.WelcomeDinner, new { @class = "" })
                                    @Html.LabelFor(model => model.WelcomeDinner, htmlAttributes: new { @class = "control-label" })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-12">
                                    @Html.CheckBoxFor(model => model.LunchOnMonday, new { @class = "" })
                                    @Html.LabelFor(model => model.LunchOnMonday, htmlAttributes: new { @class = "control-label" })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-12">
                                    @Html.CheckBoxFor(model => model.LunchOnTuesday, new { @class = "" })
                                    @Html.LabelFor(model => model.LunchOnTuesday, htmlAttributes: new { @class = "control-label" })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-12">
                                    @Html.CheckBoxFor(model => model.ReceptionNetworkOnTuesday, new { @class = "" })
                                    @Html.LabelFor(model => model.ReceptionNetworkOnTuesday, htmlAttributes: new { @class = "control-label" })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-12">
                                    @Html.CheckBoxFor(model => model.AwardBanquet, new { @class = "" })
                                    @Html.LabelFor(model => model.AwardBanquet, htmlAttributes: new { @class = "control-label" })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-12">
                                    @Html.CheckBoxFor(model => model.NoneOfTheAbove, new { @class = "" })
                                    @Html.LabelFor(model => model.NoneOfTheAbove, htmlAttributes: new { @class = "control-label" })
                                </div>
                            </div>
                        </div>
                    </fieldset>
                </div>

                    @*Do not delete its for next year*@
                    @*@if (Request.IsAuthenticated && Model.CurrentUserRoles != null && Model.CurrentUserRoles.Contains("Judge"))
                    {
                        <div class="col-xs-12 @TaskColClass">
                            <fieldset>
                                <legend>
                                    <span class="center-block">@Model["Please select all tasks that you are able to judge"]</span>

                                </legend>
                                <div class="form-group">
                                    @Html.Label(@Model["(The final tasks will be assign later)"], htmlAttributes: new { @class = "control-label" })

                                    @Html.Partial("_DropDownListMultipleSelect", new VmDropDownList
                               {
                                   HtmlElementId = "TaskIds",
                                   DataController = "task",
                                   DataAction = "gtddlwd",
                                   OptionLabel = Model["Select tasks ..."],
                                   OnItemSelected = "TaskDropDownList_OnClientSelectedItem",
                                   CssClass = "col-xs-12 col-sm-8 col-md-6",
                                   SelectedItems = Model.ClientTaskIds,

                               })

                                    @Html.ValidationMessage(@Model["TaskIds"], "", new { @class = "text-danger" })
                                    @Html.HiddenFor(model => model.ClientTaskIds, htmlAttributes: new { @id = "taskIdsHidden", @value = string.Join(",", Model.TaskIds) })

                                    <script>
                                        function TaskDropDownList_OnClientSelectedItem(ids) {
                                            debugger
                                            $("#taskIdsHidden").val(ids);
                                        }

                                    </script>
                                </div>
                            </fieldset>
                        </div>
                    }*@
            </div>

            <div class="row">
                <div class="form-group">
                    <div class="col-md-offset-2 col-sm-10 col-xs-12 col-md-6 col-lg-4">
                        <input type="submit" value="@Model["Save and Submit"]" class="btn btn-primary" />
                        @Html.ValidationSummary(false, "", new { @class = "text-danger", })
                    </div>

                </div>
            </div>

        </div>
    }
</div>

<script>
   // $("#" + element).hide(400);

    var openClose = true;
                            function Preview_Click(element) {

                                if (openClose == true) {

            $("#" + element).show(400);

                                }
                                else {

            $("#" + element).hide(400);

                                }
                                openClose = !openClose;
                            }

    $('#_ProfileEdit_Form').submit(function (e) {
                                e.preventDefault();


                                    var form = $('#_ProfileEdit_Form');
                                if (form.valid() == false) return;

                                if (validateCustomElements() == false) { return false;}

                                var formData = new FormData($('#_ProfileEdit_Form').get(0));

                                HoldOn.open({
                                theme: 'sk-cube-grid',
                    message: "<h4>@Model["Please wait..."]</h4>"
                            });

            $.ajax({
                                url: "/person/up", //you can get also action attribute from form using form.attr('action')
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
            }).done(function (result) {

                                    if (result.success == false) {

                    $("#actionMessageHandlerMessage").text(result.message);
                                    }
                                    else {
                                        alert("Your information has been saved successfully.");
                                        location.href = result.returnUrl;
                                    }

                                    @if(!string.IsNullOrEmpty(@Model.OnActionSuccess))
                {
                                        @Html.Raw("if(result.success == true){" + @Model.OnActionSuccess + "(result);}")
                }

                                    @if(!string.IsNullOrEmpty(@Model.OnActionFailed))
                {
                                        @Html.Raw("if(result.success == false){" + @Model.OnActionFailed + "();}")
                }

                                    HoldOn.close();

                                }).fail(function () { HoldOn.close(); });

                                return false;
                            });
</script>

@*validate*@

<script>

    function validateCustomElements() {



        //if ($("#taskIdsHidden").val() == '') {
        //    alert("Please select all tasks that you are able to judge");
        //    return false;
        //}

        debugger

        var JacketSizeDdl = $('#JacketSizeId');

        if (JacketSizeDdl[0] != undefined) {

            var JacketSize = JacketSizeDdl[0].options[JacketSizeDdl[0].options.selectedIndex].text;
            if (JacketSize == '') {
                alert("Please select your jacket size");
                return false;
            }
        }



        var sizeDdl = $('#SizeId');
        var tShirtSize = sizeDdl[0].options[sizeDdl[0].options.selectedIndex].text;

        if (tShirtSize == '') {
            alert("Please select your T-Shirt size");
            return false;
        }

        var dietTypeDdl = $('#DietTypeDropDownList');
        var dietType = dietTypeDdl[0].options[dietTypeDdl[0].options.selectedIndex].text;

        if (dietType == '') {
            alert("Please select your diet type");
            return false;
        }

         @if (Request.IsAuthenticated && Model.CurrentUserRoles != null
             && Model.CurrentUserRoles.Contains("Admin") == false
             && Model.Agreement == false)
         {
             @Html.Raw("return validateAgreement();")
         }
        return true;
    }

    function validateAgreement() {
        debugger
        if ($("#Agreement").prop("checked") == false) {
            alert('Please check the "Photograph & Video Release Consent" check box');
            return false;
        }

        return true;
    }
</script>

<script type="text/javascript">

    $(document).ready(function () {

        $("#PhoneNumber").mask("(999) 999-9999");
        $("#PhoneNumber").click(function () {
            $(this).focus();
        });

        $("#EmgyPersonPhoneNumber").mask("(999) 999-9999");
        $("#EmgyPersonPhoneNumber").click(function () {
            $(this).focus();
        });

        if ("@Model.ProfilePictureUrl" == '')
        {
            $("#profilePictureUrlImg").attr("src", '/Resources/Images/anonymous.png');
        }
        else
        {
            $("#profilePictureUrlImg").attr("src", "@Model.ProfilePictureUrl");
        }

        if ("@Model.UniversityPictureUrl" == '')
        {
            $("#universityPictureUrlImg").attr("src", '/Resources/Images/university-empty-pic.png');
        }
        else
        {
            $("#universityPictureUrlImg").attr("src", "@Model.UniversityPictureUrl");
        }
         });

</script>

<script type="text/javascript">
    function uploadProfilePicture() {

        var formData = new FormData();

        var profile_file = document.getElementById("profilePicturFileInput").files[0];

        formData.append("oldProfilePictureUrl", "@Model.ProfilePictureUrl");
        formData.append("UploadedProfilePicture", profile_file);

        HoldOn.open({
            theme: 'sk-cube-grid',
            message: "<h4>@Model["Please wait..."]</h4>"
        });

        $.ajax({
            url: "/person/upp", //you can get also action attribute from form using form.attr('action')
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
        }).done(
            function (result) {
                if (result.success == true) {

                    var profile_file = document.getElementById("profilePicturFileInput").files[0];
                    if (result.profilePictureUrl == '') {
                        result.profilePictureUrl = '/Resources/Images/anonymous.png';
                    }
                    $("#profilePictureUrlImg").attr("src", result.profilePictureUrl);
                    $("#ProfilePictureUrlHidden").val(result.profilePictureUrl);
                    alert(result.message);

                }
                HoldOn.close();
            }).fail(function (result) {

                alert(result.message);

                HoldOn.close();
            });
    }
</script>

<script type="text/javascript">
    function uploadUniversityPicture() {

        var formData = new FormData();

        var university_file = document.getElementById("universityPicturFileInput").files[0];

        formData.append("oldUniversityPictureUrl", "@Model.UniversityPictureUrl");
        formData.append("UploadedUniversityPicture", university_file);
        formData.append("universityId", $("#UniversityId").val());

        HoldOn.open({
            theme: 'sk-cube-grid',
            message: "<h4>@Model["Please wait..."]</h4>"
        });

        $.ajax({
            url: "/person/uup", //you can get also action attribute from form using form.attr('action')
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
        }).done(
            function (result)
            {
                if (result.success == true) {
                    var university_file = document.getElementById("universityPicturFileInput").files[0];
                    if (result.universityPictureUrl == '') {
                        result.universityPictureUrl = '/Resources/Images/university-empty-pic.png';
                    }
                    $("#universityPictureUrlImg").attr("src", result.universityPictureUrl);
                    $("#UniversityPictureUrlHidden").val(result.universityPictureUrl);
                    alert(result.message);

                }
                HoldOn.close();
            }).fail(function () { HoldOn.close(); });
    }

    function loadUniversityPictureUrl(id)
    {

        $.ajax({
            url: "/person/luup", //you can get also action attribute from form using form.attr('action')
            type: 'POST',
            data: { universityId: $("#UniversityId").val() },
        }).done(
            function (result)
            {
                if (result.success == true) {

                    var university_file = document.getElementById("universityPicturFileInput").files[0];
                    if (result.universityPictureUrl == '') {
                        result.universityPictureUrl = '/Resources/Images/university-empty-pic.png';
                    }
                    $("#universityPictureUrlImg").attr("src", result.universityPictureUrl);
                    $("#UniversityPictureUrlHidden").val(result.universityPictureUrl);

                }
            });
    }
</script>

<script type="text/javascript">
    function uploadResume() {

        var formData = new FormData();

        var resume_file = document.getElementById("resumeFileInput").files[0];

        formData.append("oldResumeUrl", "@Model.ResumeUrl");
        formData.append("uploadedResume", resume_file);

        HoldOn.open({
            theme: 'sk-cube-grid',
            message: "<h4>@Model["Please wait..."]</h4>"
        });

        $.ajax({
            url: "/person/ur", //you can get also action attribute from form using form.attr('action')
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
        }).done(
            function (result) {
                if (result.success == true) {
                    alert(result.message);
                    HoldOn.close();
                    $("#ResumeUrlHidden").val(result.resumeUrl);
                }
                else {
                HoldOn.close();
            }
            }).fail(function () { HoldOn.close(); });
    }
</script>

@model Model.ViewModels.Grade.Grading.VmSingleGradingType

@{
    var gradingDivId = "gradingTable" + Model.GradeId;
}


<div id="@gradingDivId">


    @{
        var pointRadioButtonGroupNameArrayIndex = 0;
        var descriptionIdArrayIndex = 0;
        var signatureDataContainerIdArrayIndex = 0;
        var alternative_grading_header = "grading-header";
        @Html.Raw("<script>totalScore = " + @Model.TotalScore + ";\n$('#TotalScore').text(totalScore);</script>")

    }

    <div class="col-xs-8 text-left">
        <span id="gradeTypeSpan" class="grading-total"> Total score : </span>
        <span class="grading-total" id="gradingTotal">@Model.GradeTotalScore</span>

    </div>
    @* Total score *@
    <div class="col-xs-4 text-left">
        <span id="gradeTypeSpanTotalAvegrage" class="grading-total"> Total score : </span>
        <span class="grading-total" id="TotalScore"></span>
    </div>

    @foreach (var gradingDetail in Model.TeamGrading.GradingDetailList)
    {
        var pointRadioButtonGroupName = "pointRadioButtonGroupName" + gradingDetail.Id;

        @Html.Raw("<script>pointRadioButtonGroupNameArray[" + pointRadioButtonGroupNameArrayIndex + "] = '" + @pointRadioButtonGroupName + "'\n</script>")
        @Html.Raw("<script>gradingDetailIdArray[" + pointRadioButtonGroupNameArrayIndex++ + "] = '" + @gradingDetail.Id + "'\n</script>")


        <div class="col-xs-12 @alternative_grading_header">
            <div class="row text-justify">
                <strong>
                    @gradingDetail.EvaluationItem
                </strong>
            </div>

            <div class="row">
                <table>

                    <tr>
                        @{
                            var pointRadioButtonId = "";
                            pointRadioButtonId = "gradePoint_None" + gradingDetail.Id;
                        }

                        <td>
                            <input type="radio"
                                   onclick="gradeDetailRadioButtonClick();"
                                   class="point-radio-button"
                                   value="null"
                                   id="@pointRadioButtonId"
                                   name="@pointRadioButtonGroupName"
                                   checked="checked" />
                        </td>

                        @for (int i = 0; i <= @gradingDetail.MaxPoint; i++)
                        {

                            pointRadioButtonId = "gradePoint_" + gradingDetail.Id + "_" + @i;

                            <td>
                                @if (gradingDetail.Point == i)
                                {
                                    <input type="radio"
                                           onclick="gradeDetailRadioButtonClick();"
                                           class="point-radio-button"
                                           value="@i"
                                           id="@pointRadioButtonId"
                                           name="@pointRadioButtonGroupName"
                                           data-coefficient="@gradingDetail.Coefficient"
                                           checked="checked" />
                                }
                                else
                                {
                                    <input type="radio"
                                           onclick="gradeDetailRadioButtonClick()"
                                           class="point-radio-button"
                                           value="@i"
                                           id="@pointRadioButtonId"
                                           name="@pointRadioButtonGroupName"
                                           data-coefficient="@gradingDetail.Coefficient" />
                                }
                            </td>


                        }

                        @{
                            var descriptionId = "description" + @Model.TeamId + "_GT_" + gradingDetail.Id;
                            var signatureDataContainerId = "signatureDataContainer" + @Model.TeamId + "_GT_" + gradingDetail.Id;
                        }

                        @Html.Raw("<script>descriptionIdArray[" + descriptionIdArrayIndex++ + "] = '" + descriptionId + "'\n</script>")
                        @Html.Raw("<script>signatureDataContainerIdArray[" + signatureDataContainerIdArrayIndex++ + "] = '" + signatureDataContainerId + "'\n</script>")

                        <td>
                            <input type="hidden" id="@descriptionId" class="description" value="@gradingDetail.Description" />
                            <input type="hidden" id="@signatureDataContainerId" value="@gradingDetail.Signature" />

                            <input type="button" value="Comment"
                                   class="btn btn-description"
                                   id="descrioptionButton"
                                   onclick="openDescriptionModal('@Model.TeamName on @Model.GradeType score sheet','@descriptionId', '@signatureDataContainerId')" />
                        </td>
                    </tr>

                    <tr>
                        <td>
                            <span class="point-radio-button">None</span>
                        </td>

                        @for (int j = 0; j <= @gradingDetail.MaxPoint; j++)
                        {
                            <td>
                                <span class="point-radio-button">@j</span>
                            </td>
                        }
                    </tr>

                </table>

            </div>

            <input type="hidden" value="@gradingDetail.MaxPoint" />
        </div>

        if (alternative_grading_header == "grading-header")
        {
            alternative_grading_header = "";
        }
        else
        {
            alternative_grading_header = "grading-header";
        }
    }



    <link href="~/Resources/CSS/modal-fixed.css" rel="stylesheet" />

    <div class="modal-fixed">
        <div class="modal fade" id="descriptionModal" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title"><span id="descriptionHeaderSpan"></span></h4>
                        <hr />

                    </div>
                    <div class="modal-body">
                        <div class="row">
                           @* <img id="signatureImage" class="hidden" />*@

                            <div id="teamDescriptionArea"></div>
                            
                            @*<div id="signatureContainer">
                                <div id="signature"></div>
                            </div>*@
                        
                        </div>


                    </div>
                    <div class="modal-footer text-center">

                        <button type="button" onclick='$("#signatureContainer").jSignature("clear");' class="btn btn-danger text-left hidden">Clear</button>
                        <button type="button" class="btn btn-danger" data-dismiss="modal">Save</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>

        function openDescriptionModal(descriptionHeader, hiddenDescriptionId, signatureDataContainerId) {
            
            //$("#signatureContainer").jSignature('destroy');
            //$("#signatureContainer").jSignature({ width: '100%', height: 300 });
            //$("#signatureContainer").resize();
            //$("#signatureContainer").bind('change', function (e) {

            //    /* 'e.target' will refer to div with "#signatureContainer" */

            //    var data = $('#signatureContainer').jSignature('getData', 'svgbase64');

            //    $("#" + signatureDataContainerId).val("data:" + data[0] + "," + data[1]);

            //});

            //if ($("#" + signatureDataContainerId).val() != '') {

            //    //var signatureJSONObject = JSON.parse($("#" + signatureDataContainerId).val());
            //    //var signatureData = "data:" + signatureJSONObject.data[0] + "," + signatureJSONObject.data[1];
            //    debugger
            //    var signatureData = $("#" + signatureDataContainerId).val();
            //    $("#signatureImage").attr("src", signatureData);


            //    // $("#signatureContainer").jSignature('setData', signatureData, 'svgbase64');
            //}

            $("#descriptionHeaderSpan").text(descriptionHeader);

            $("#teamDescriptionArea").summernote({
                height: 500, minHeight: null, maxHeight: null, focus: false,
                toolbar: [
                    ['style', ['style']],
                    ['font', ['bold', 'italic', 'underline', 'clear']],
                    ['fontname', ['fontname']], ['fontsize', ['fontsize']],
                    ['color', ['color']],
                    ['para', ['ul', 'ol', 'paragraph']],
                    ['height', ['height']],
                    ['table', ['table']],
                    ['insert', ['link', 'picture', 'hr', 'uploadfile']],
                    ['view', ['fullscreen', 'codeview']],
                    ['help', ['help']]
                ],
            });
            debugger
            $("#teamDescriptionArea").summernote('code', $("#" + hiddenDescriptionId).val());

            $("#descriptionModal").modal();

            activeDescriptionId = hiddenDescriptionId;

            $('#descriptionModal').on('hidden.bs.modal', function () {

                $("#" + activeDescriptionId).val($("#teamDescriptionArea").summernote('code'));

                //$("#signatureImage").attr("src", '');
            })

        }

        function gradeDetailRadioButtonClick() {

            gradingSaved = false;
            calculateTotal();
        }

        function hasCheckedScore() {

            for (i = 0; i < pointRadioButtonGroupNameArray.length; i++)
            {
                var radioValue = $("input[name='" + pointRadioButtonGroupNameArray[i] + "']:checked").val();
                debugger
                if (radioValue && radioValue != 'null') {
                    return true;
                }
            }

            return false;
        }

        function calculateTotal() {

            var total = 0;
            for (i = 0; i < pointRadioButtonGroupNameArray.length; i++) {

                var radioValue = $("input[name='" + pointRadioButtonGroupNameArray[i] + "']:checked").val();
                var coefficient = $("input[name='" + pointRadioButtonGroupNameArray[i] + "']:checked").data("coefficient");

                if (radioValue && radioValue != 'null') {
                    total += parseInt(radioValue) * parseInt(coefficient);
                }
            }

            $("#gradingTotal").text(total);

            $.ajax(
                {
                    type: 'POST',
                    url: '/grade/gtswg',
                    data: { teamId:@Model.TeamId, gradeId: @Model.GradeId},
                    dataType: 'json',

                }).done(function (data, textStatus, jqXHR) {
                    debugger
                    if (hasCheckedScore() == true ) {
                        data.JudgeCount++;
                    }

                    var finalTotal = data.TotalScore + total;
                    if (data.JudgeCount > 0) {
                        $("#TotalScore").text(finalTotal / data.JudgeCount);
                    }
                    else {
                        $("#TotalScore").text(finalTotal);
                    }


                }).fail(function (xhr, status) {
                    var jsonObject = JSON.parse(xhr.responseText);
                    if (jsonObject.hasError === true) {
                        alert(jsonObject.message);
                    }
                });
        }

    </script>

</div>


@*// Resets the signature pad
    $("#signatureContainer").jSignature('reset');

    // Destroy the signature pad
    $("#signatureContainer").jSignature('destroy');

    // Returns a data object appropriate for the data format
    $("#signatureContainer").jSignature('getData', FORMATNAME);

    // Sets data
    $("#signatureContainer").jSignature('setData', DATAOBJECT, FORMATNAME);

    // Disables the signature pad
    $("#signatureContainer").jSignature('disable');

    // Re-enable the signature pad
    $("#signatureContainer").jSignature('enable');

    // Returns a boolean true if the jSignature was modified
    $("#signatureContainer").jSignature('isModified');

    // Returns the configurable settings
    $("#signatureContainer").jSignature('getSettings');

    // Up<a href="https://www.jqueryscript.net/time-clock/">date</a>s certain settings
    $("#signatureContainer").jSignature('updateSetting', SETTINGNAME, VALUE, Boolean);*@
